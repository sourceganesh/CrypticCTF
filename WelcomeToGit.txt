Welcome to Git. 

Git, in simple words, is a tool that helps you put your code online, and allow different people to contribute to it.

Git is not restricted to simply that. Git is also essential in Version Control.

The scope of this CTF is to simply let you all know the very basics of git and crack our secret message in the process.

If you are reading this, know that, there has already been a "commit" made. Commits are checkpoints. They are the "save" feature of a game.

When you commit your project, the project will take a snapshot of everything you have and store it. Breaking it down to the simplest core way, git is a collection of a lots of commits. 

When committing we have an essential part of the commit known as the "commit message". Since this sentance is visible to you, there is already a commit made with the message as "Hello there! ~ General Kenobi". 

You can give any commit message, but, on a real project your commit message will be expected to describe briefly and professionally of the changes you have made in the commit with respect to the previous commit.

This sentance will account for the last commit in the master branch. Hence forth we will be looking into branching. This master branch will be branching out into two branches, "adam" and "eva". 

They will contain all the sentances that can be seen above but will differ in their commits henceforth. Branches are used for adding a feature to a project. However, the branches now created will simply be an extension of the master branch.

Note that in a real project, the actual project resides in the master branch. Other branches are used for testing purposes and to add features or remove bugs. 

----ADAM----

Well, hi there. Let us talk about SHA. A SHA is a unique id given to a commit in git. They are random Characters. Before making the commit, it is impossible for one to know the SHA of their commit.

SHA's allow us to uniquely identify the commit and go back to the commit. This is the idea of version control. Every version of a project can be traced back to. So if you made a buggy program later, you can always head back to when it was stable and continue from there.